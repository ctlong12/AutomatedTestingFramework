 
 
 
 
 
 
  __  __                         _ 
 |  \/  |                       | |
 | \  / | __ _ _ __  _   _  __ _| |
 | |\/| |/ _` | '_ \| | | |/ _` | |
 | |  | | (_| | | | | |_| | (_| | |
 |_|  |_|\__,_|_| |_|\__,_|\__,_|_|   





  ___                  _            _ 
  / _ \__ _____ _ ___ _(_)_____ __ _(_)
 | (_) \ V / -_) '_\ V / / -_) V  V /_ 
  \___/ \_/\___|_|  \_/|_\___|\_/\_/(_)
                                       


    The Moodle Automated Testing Framework is designed to test the
    functionality of different methods located within the Moodle codebase. 
    The framework is designed to take in new methods and test cases to 
    adequately execute them to retrieve the results. The outcomes are 
    compared to the expected output specified in the test case and results
    are generated in two different ways.



        Rerunning the Script:
            ~$ ^C
            ~$ bash ./runAllTests.sh



   ___ _ _            _     _____          _   _               
  / __\ (_) ___ _ __ | |_  /__   \___  ___| |_(_)_ __   __ _ _ 
 / /  | | |/ _ \ '_ \| __|   / /\/ _ \/ __| __| | '_ \ / _` (_)
/ /___| | |  __/ | | | |_   / / |  __/\__ \ |_| | | | | (_| |_ 
\____/|_|_|\___|_| |_|\__|  \/   \___||___/\__|_|_| |_|\__, (_)
                                                       |___/   

                                                    

    The client-side to the automated testing framework displays the results 
    via a php framework called Laravel. Laravel is a free, open-source 
    PHP web framework, created by Taylor Otwell and intended for the development
    of web applications following the model–view–controller (MVC) architectural 
    pattern and based on Symfony. 

        Accessing the Client Side:
            --> 1 ) Enter Testing Framework
            --> 2 ) Run Test With Client
            --> All test cases will now be ran and the results are displayed on a 
                web browser which can be found on port 8000

        Adding New Cases Via Client:
            From within the client web application, new test cases can be added as 
            well as new methods after authentication. NOTE: Methods that are added 
            to the testing framework must not require access to a database, nor 
            inherit properties from other classes. To create a new method, simple 
            follow the navigation links to the appropriate page and properly fill out 
            the form that is given.




  ___                                          _     __ _              _____          _   _               
  / __\___  _ __ ___  _ __ ___   __ _ _ __   __| |   / /(_)_ __   ___  /__   \___  ___| |_(_)_ __   __ _ _ 
 / /  / _ \| '_ ` _ \| '_ ` _ \ / _` | '_ \ / _` |  / / | | '_ \ / _ \   / /\/ _ \/ __| __| | '_ \ / _` (_)
/ /__| (_) | | | | | | | | | | | (_| | | | | (_| | / /__| | | | |  __/  / / |  __/\__ \ |_| | | | | (_| |_ 
\____/\___/|_| |_| |_|_| |_| |_|\__,_|_| |_|\__,_| \____/_|_| |_|\___|  \/   \___||___/\__|_|_| |_|\__, (_)
                                                                                                   |___/   




        Although test cases can be run in sync with the web application. An improper 
        Larvel installation or depreciated dependencies may hinder the ability for the 
        client to work as expected. To run test cases without the client, test cases 
        can be ran directory in the terminal and displayed in a simple HTML file.


        Accessing the Command Line Side:
            --> 1 ) Enter Testing Framework
            --> 2 ) Run Test With Command Line
            --> All test cases will now be ran and the results are displayed on a web 
                browser automatically

        Adding New Cases Via Command Line:
            New test cases can be added as well as new methods after authentication 
            NOTE: Methods that are added to the testing framework must not require access to a 
            database, nor inherit properties from other classes.  


        Adding Test Case:

            --> Create a .txt file with the appropriate information 
                inside (each on their on individual line)

                        < Test Case Id >  
                        < Requirement >   
                        < Component >  
                        < Method >   
                        < Input >  
                        < Expected >

            --> Place the file in /pathToProject/TestAutomation/TestCases


        
        Adding Method Case:

            --> Create a .txt file with the appropriate information 
            inside (each on their on individual line)

                        < Method Id >
                        < Method Description >         
                        < Component Name >        
                        < Component Location >            
                        < Method Length >

            --> Place the file in /pathToProject/TestAutomation/Methods

        
        
 
   __       __               _     _                 ___ _ _            _     
  /__\ ___ / _|_ __ ___  ___| |__ (_)_ __   __ _    / __\ (_) ___ _ __ | |_ _ 
 / \/// _ \ |_| '__/ _ \/ __| '_ \| | '_ \ / _` |  / /  | | |/ _ \ '_ \| __(_)
/ _  \  __/  _| | |  __/\__ \ | | | | | | | (_| | / /___| | |  __/ | | | |_ _ 
\/ \_/\___|_| |_|  \___||___/_| |_|_|_| |_|\__, | \____/|_|_|\___|_| |_|\__(_)
                                          |___/   


        Refreshing Server:

            Occasionally the port on which the client-server rests may be 
            inaccessible due to a number of issues. Since this is quite 
            often a common issue. The Moodle Automated Testing Framework has 
            the ability to refresh and or clear and restart port 8000 to free 
            up the port to host the client we application.


        To Refresh the Client-Server:

            From the main menu enter the following:
            
                --> 3) Refresh Client Server




   ___             _ _ _         
  / __\ __ ___  __| (_) |_ ___ _ 
 / / | '__/ _ \/ _` | | __/ __(_)
/ /__| | |  __/ (_| | | |_\__ \_ 
\____/_|  \___|\__,_|_|\__|___(_)
                                                            

    The Moodle Automated Testing Framework!
    Created by Alex Laughlin, Andrew Nesbett, and Chandler Long
    Created for CSCI 362 Software Engineering 

    Tribute:

        A special thanks to Synergy Learning. It has been a great experience working 
        with Synergy. I would highly recommend them. There is a certain sense of 
        freedom working with Moodle. You can build it to be what you want it to be. 
        The combined effort of this learning community has created an incredible product 
        that has revolutionized the education system. It has been a pleasure developing 
        with Synergy Learning. 


1) Enter Testing Framework  4) Manual
2) Install Dependencies	    5) Quit
3) Refresh Client Server
